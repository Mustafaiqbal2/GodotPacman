name: Export iOS

on:
  workflow_dispatch:  # Manual trigger
  push:
    branches: [ main ]  # Optional: Trigger on pushes to main

jobs:
  export:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Install Godot
        run: |
          brew install --cask godot
          godot --version
          GODOT_FULL_VERSION=$(godot --version | cut -d' ' -f2)
          # Extract just the major.minor version
          GODOT_VERSION=$(echo $GODOT_FULL_VERSION | sed -E 's/([0-9]+\.[0-9]+).*/\1/')
          echo "Detected Godot version: $GODOT_FULL_VERSION (using $GODOT_VERSION for templates)"
          echo "godot_version=$GODOT_VERSION" >> $GITHUB_ENV
          echo "godot_full_version=$GODOT_FULL_VERSION" >> $GITHUB_ENV
        
      - name: Download templates for Godot 4.x
        run: |
          TEMPLATES_DIR=~/.local/share/godot/export_templates
          mkdir -p $TEMPLATES_DIR
          
          # Try multiple template sources and formats
          TEMPLATE_URLS=(
            "https://github.com/godotengine/godot/releases/download/${godot_version}-stable/Godot_v${godot_version}-stable_export_templates.tpz"
            "https://github.com/godotengine/godot/releases/download/${godot_version}.0-stable/Godot_v${godot_version}.0-stable_export_templates.tpz"
            "https://github.com/godotengine/godot/releases/download/${godot_version}.1-stable/Godot_v${godot_version}.1-stable_export_templates.tpz"
            "https://downloads.tuxfamily.org/godotengine/${godot_version}/Godot_v${godot_version}-stable_export_templates.tpz"
            "https://downloads.tuxfamily.org/godotengine/${godot_version}/Godot_v${godot_version}.0-stable_export_templates.tpz"
          )
          
          for URL in "${TEMPLATE_URLS[@]}"; do
            echo "Trying to download templates from: $URL"
            if curl -L --connect-timeout 30 --retry 3 --retry-delay 5 "$URL" -o templates.tpz; then
              # Check if it's a valid zip file
              if unzip -t templates.tpz > /dev/null 2>&1; then
                echo "Successfully downloaded templates from $URL"
                break
              else
                echo "Downloaded file is not a valid zip archive, trying next source..."
                rm templates.tpz
              fi
            else
              echo "Failed to download from $URL, trying next source..."
            fi
          done
          
          # Check if we have a valid template file
          if [ ! -f templates.tpz ] || ! unzip -t templates.tpz > /dev/null 2>&1; then
            echo "All download attempts failed. Trying direct download for version 4.x."
            # Direct download for Godot 4.x
            curl -L --connect-timeout 30 --retry 3 --retry-delay 5 "https://github.com/godotengine/godot-builds/releases/download/4.2.2-stable/Godot_v4.2.2-stable_export_templates.tpz" -o templates.tpz
          fi
          
          # Final check and installation
          if [ -f templates.tpz ] && unzip -t templates.tpz > /dev/null 2>&1; then
            echo "Installing templates..."
            unzip -o templates.tpz -d .
            
            # Create version-specific directory
            TARGET_DIR="$TEMPLATES_DIR/${godot_version}.stable"
            mkdir -p "$TARGET_DIR"
            
            # Copy templates to the correct location
            if [ -d "templates" ]; then
              cp -r templates/* "$TARGET_DIR/"
            else
              # Some templates unzip directly without a templates/ subdirectory
              cp -r *.{zip,tpz} "$TARGET_DIR/" 2>/dev/null || true
            fi
            
            echo "Template installation complete. Contents:"
            ls -la "$TARGET_DIR/"
          else
            echo "Failed to obtain valid export templates after multiple attempts."
            exit 1
          fi
      
      - name: Create export_presets.cfg if missing
        run: |
          if [ ! -f export_presets.cfg ]; then
            echo "Creating minimal export_presets.cfg for iOS"
            cat > export_presets.cfg << 'EOF'
          [preset.0]

          name="iOS"
          platform="iOS"
          runnable=true
          dedicated_server=false
          custom_features=""
          export_filter="all_resources"
          include_filter=""
          exclude_filter=""
          export_path="build/ios/GodotPacman.ipa"
          encryption_include_filters=""
          encryption_exclude_filters=""
          encrypt_pck=false
          encrypt_directory=false

          [preset.0.options]

          custom_template/debug=""
          custom_template/release=""
          application/app_store_team_id=""
          application/provisioning_profile_uuid_debug=""
          application/code_sign_identity_debug="iPhone Developer"
          application/export_method_debug=0
          application/provisioning_profile_uuid_release=""
          application/code_sign_identity_release="iPhone Distribution"
          application/export_method_release=0
          application/targeted_device_family=2
          application/bundle_identifier="com.yourusername.godotpacman"
          application/signature=""
          application/short_version="1.0"
          application/version="1.0"
          application/icon_76x76=""
          application/icon_152x152=""
          application/icon_1024x1024=""
          capabilities/access_wifi=false
          capabilities/push_notifications=false
          user_data/accessible_from_files_app=false
          user_data/accessible_from_itunes_sharing=false
          privacy/camera_usage_description=""
          privacy/microphone_usage_description=""
          privacy/photolibrary_usage_description=""
          orientation/portrait=true
          orientation/landscape_left=false
          orientation/landscape_right=false
          orientation/portrait_upside_down=false
          EOF
                      echo "Created export_presets.cfg file"
                    else
                      echo "export_presets.cfg already exists"
                    fi
                    cat export_presets.cfg
          
      - name: Godot export debug info
        run: |
          echo "Installed Godot version:"
          godot --version
          echo "Templates locations:"
          ls -la ~/.local/share/godot/export_templates/ || true
          echo "Godot editor settings:"
          ls -la ~/.config/godot/ || true
          echo "Current directory content:"
          ls -la
          
      - name: Export iOS project
        run: |
          mkdir -p build/ios
          echo "Trying export with debug flag..."
          godot --headless --export-debug "iOS" "build/ios/GodotPacman.ipa" || true
          
          if [ ! -f "build/ios/GodotPacman.ipa" ]; then
            echo "Debug export failed, trying regular export..."
            godot --headless --export "iOS" "build/ios/GodotPacman.ipa" || true
          fi
          
          if [ ! -f "build/ios/GodotPacman.ipa" ]; then
            echo "Direct IPA export failed, trying XCArchive export..."
            godot --headless --export "iOS" "build/ios/GodotPacman.xcarchive" || true
            
            # Create IPA from xcarchive if it exists
            if [ -d "build/ios/GodotPacman.xcarchive" ]; then
              echo "Xcarchive found, creating IPA..."
              cd build/ios
              mkdir -p Payload
              cp -r GodotPacman.xcarchive/Products/Applications/GodotPacman.app Payload/ || true
              zip -r GodotPacman.zip Payload || true
              mv GodotPacman.zip GodotPacman.ipa || true
              cd ../../
            fi
          fi
          
      - name: List exported files
        run: |
          echo "Export directory contents:"
          ls -la build/ios || echo "No files found in build/ios"
          
          if [ ! -f "build/ios/GodotPacman.ipa" ] && [ ! -d "build/ios/GodotPacman.xcarchive" ]; then
            echo "No export files were created. Creating a placeholder file for artifact upload."
            mkdir -p build/ios
            echo "Export failed. Please check the logs for details." > build/ios/export_failed.txt
          fi
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-build
          path: build/ios
          retention-days: 14