name: Export iOS

on:
  workflow_dispatch:  # Manual trigger
  push:
    branches: [ main ]  # Optional: Trigger on pushes to main

jobs:
  export:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Install Godot
        run: |
          brew install --cask godot
          godot --version
          GODOT_VERSION=$(godot --version | cut -d' ' -f2)
          echo "Detected Godot version: $GODOT_VERSION"
          echo "godot_version=$GODOT_VERSION" >> $GITHUB_ENV
          
      - name: Setup export templates
        run: |
          TEMPLATES_DIR=~/.local/share/godot/export_templates
          mkdir -p $TEMPLATES_DIR
          
          # Use GitHub as a more reliable download source
          DOWNLOAD_URL="https://github.com/godotengine/godot/releases/download/${godot_version}-stable/Godot_v${godot_version}-stable_export_templates.tpz"
          echo "Downloading templates from: $DOWNLOAD_URL"
          
          # Download with retry mechanism
          for i in {1..3}; do
            if curl -L --connect-timeout 30 --retry 5 --retry-delay 5 "$DOWNLOAD_URL" -o templates.tpz; then
              break
            fi
            echo "Download attempt $i failed. Retrying..."
            sleep 5
          done
          
          # Check if download was successful
          if [ ! -f templates.tpz ]; then
            echo "Failed to download templates after multiple attempts. Using alternate source."
            ALTERNATE_URL="https://downloads.godotengine.org/godot/${godot_version}/Godot_v${godot_version}-stable_export_templates.tpz"
            curl -L --connect-timeout 30 --retry 5 --retry-delay 5 "$ALTERNATE_URL" -o templates.tpz
          fi
          
          # Install the templates
          if [ -f templates.tpz ]; then
            unzip -o templates.tpz -d .
            mkdir -p "$TEMPLATES_DIR/${godot_version}.stable"
            cp -r templates/* "$TEMPLATES_DIR/${godot_version}.stable/"
            ls -la "$TEMPLATES_DIR/${godot_version}.stable/"
          else
            echo "Failed to download templates from multiple sources."
            exit 1
          fi
          
      - name: Create export_presets.cfg if missing
        run: |
          if [ ! -f export_presets.cfg ]; then
            echo "Creating minimal export_presets.cfg for iOS"
            cat > export_presets.cfg << EOL
[preset.0]

name="iOS"
platform="iOS"
runnable=true
dedicated_server=false
custom_features=""
export_filter="all_resources"
include_filter=""
exclude_filter=""
export_path="build/ios/GodotPacman.ipa"
encryption_include_filters=""
encryption_exclude_filters=""
encrypt_pck=false
encrypt_directory=false

[preset.0.options]

custom_template/debug=""
custom_template/release=""
application/app_store_team_id=""
application/provisioning_profile_uuid_debug=""
application/code_sign_identity_debug="iPhone Developer"
application/export_method_debug=0
application/provisioning_profile_uuid_release=""
application/code_sign_identity_release="iPhone Distribution"
application/export_method_release=0
application/targeted_device_family=2
application/bundle_identifier="com.yourusername.godotpacman"
application/signature=""
application/short_version="1.0"
application/version="1.0"
application/icon_76x76=""
application/icon_152x152=""
application/icon_1024x1024=""
capabilities/access_wifi=false
capabilities/push_notifications=false
user_data/accessible_from_files_app=false
user_data/accessible_from_itunes_sharing=false
privacy/camera_usage_description=""
privacy/microphone_usage_description=""
privacy/photolibrary_usage_description=""
orientation/portrait=true
orientation/landscape_left=false
orientation/landscape_right=false
orientation/portrait_upside_down=false
EOL
            echo "Created export_presets.cfg file"
          else
            echo "export_presets.cfg already exists"
          fi
          cat export_presets.cfg
          
      - name: Export iOS project
        run: |
          mkdir -p build/ios
          godot --headless --export-debug "iOS" "build/ios/GodotPacman.ipa" || true
          
          # Check if export succeeded
          if [ -f "build/ios/GodotPacman.ipa" ]; then
            echo "Export successful"
          else
            echo "Export didn't create an IPA, trying alternative approach"
            godot --headless --export "iOS" "build/ios/GodotPacman.xcarchive"
            
            # Create IPA from xcarchive if it exists
            if [ -d "build/ios/GodotPacman.xcarchive" ]; then
              cd build/ios
              mkdir -p Payload
              cp -r GodotPacman.xcarchive/Products/Applications/GodotPacman.app Payload/ || true
              zip -r GodotPacman.zip Payload || true
              mv GodotPacman.zip GodotPacman.ipa || true
              cd ../../
            fi
          fi
          
      - name: List exported files
        run: |
          ls -la build/ios || echo "No files found in build/ios"
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-build
          path: build/ios
          retention-days: 14