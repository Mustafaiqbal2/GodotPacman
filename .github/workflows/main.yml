name: Export iOS

on:
  workflow_dispatch:  # Manual trigger
  push:
    branches: [ main ]  # Optional: Trigger on pushes to main

jobs:
  export:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Install Godot with Mono
        run: |
          echo "Installing Godot Mono via Homebrew..."
          brew install --cask godot-mono
          # Verify installation
          godot-mono --version
          GODOT_FULL_VERSION=$(godot-mono --version | cut -d' ' -f2)
          GODOT_VERSION=$(echo $GODOT_FULL_VERSION | sed -E 's/([0-9]+\.[0-9]+).*/\1/')
          echo "Detected Godot version: $GODOT_FULL_VERSION (using $GODOT_VERSION for templates)"
          echo "godot_version=$GODOT_VERSION" >> $GITHUB_ENV
          echo "godot_full_version=$GODOT_FULL_VERSION" >> $GITHUB_ENV
      

      - name: Prepare Godot project for building
        run: |
          echo "Preparing project for building..."
          
          # Create a modified project.godot that disables C# for export
          cp project.godot project.godot.original
          
          # Add configuration to disable C# for export
          cat >> project.godot << EOF
      
          [mono]
          
          export/include_scripts=false
          EOF
          
          # Remove the .mono directory if it exists
          rm -rf .mono
          
          # Create basic directories needed
          mkdir -p .godot/mono/temp
          mkdir -p .godot/imported
          
          # Create an empty .csproj.assets.json file to prevent Mono from trying to restore packages
          mkdir -p .mono/temp/obj
          echo "{}" > .mono/temp/obj/project.assets.json
          
          echo "Project prepared for building"
      
          
      - name: Godot export debug info
        run: |
          echo "Installed Godot version:"
          godot-mono --version
          
          echo "Looking for template locations:"
          find ~ -name "export_templates" -type d | xargs ls -la || true
          
          echo "Checking specific template paths:"
          ls -la ~/.local/share/godot/export_templates/ 2>/dev/null || echo "Path not found"
          ls -la ~/Library/Application\ Support/Godot/export_templates/ 2>/dev/null || echo "Path not found"
          
          echo "Current directory content:"
          ls -la
      - name: Download iOS template specifically
        run: |
            echo "Downloading iOS template directly..."
            
            # Create template directory specifically for iOS
            mkdir -p ~/Library/Application\ Support/Godot/export_templates/4.4.stable.mono
            
            # Download iOS template directly
            curl -L "https://github.com/godotengine/godot-builds/releases/download/4.4-stable/Godot_v4.4-stable_mono_export_templates.tpz" -o templates.tpz
            
            # Extract iOS template from the archive
            mkdir -p temp_extract
            unzip -j templates.tpz "*ios*" -d temp_extract
            
            # Copy to proper location
            if [ -f "temp_extract/ios.zip" ]; then
              cp temp_extract/ios.zip ~/Library/Application\ Support/Godot/export_templates/4.4.stable.mono/
              echo "iOS template copied to export templates directory"
            else
              echo "iOS template not found in archive"
            fi
            
            # Verify
            ls -la ~/Library/Application\ Support/Godot/export_templates/4.4.stable.mono/

            - name: Configure export presets for CI
            run: |
              echo "Modifying export_presets.cfg for minimal signing..."
              
              # Make backup
              cp export_presets.cfg export_presets.cfg.bak
              
              # Set export_project_only to true first (for PCK creation)
              sed -i '' 's/application\/export_project_only=.*/application\/export_project_only=true/' export_presets.cfg
              
              # Use minimal signing instead of completely disabling
              sed -i '' 's/application\/app_store_team_id=.*/application\/app_store_team_id="FAKETEAMID"/' export_presets.cfg
              sed -i '' 's/application\/provisioning_profile_uuid_debug=.*/application\/provisioning_profile_uuid_debug=""/' export_presets.cfg
              sed -i '' 's/application\/code_sign_identity_debug=.*/application\/code_sign_identity_debug="Apple Development"/' export_presets.cfg
              sed -i '' 's/application\/bundle_identifier=.*/application\/bundle_identifier="com.godot.iostemplate"/' export_presets.cfg
              
              echo "Modified export_presets.cfg:"
              cat export_presets.cfg
          
      - name: Export iOS PCK and Create Manual XCArchive
        run: |
              mkdir -p build/ios
              
              # First export PCK (most reliable)
              echo "Exporting PCK file..."
              godot-mono --headless --verbose --export-pack "iOS" "build/ios/GodotPacman.pck"
              
              # Create a basic Info.plist file for the client
              cat > build/ios/Info.plist << 'EOF'
              <?xml version="1.0" encoding="UTF-8"?>
              <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
              <plist version="1.0">
              <dict>
                  <key>CFBundleIdentifier</key>
                  <string>com.yourcompany.yourappid</string>
                  <key>CFBundleDisplayName</key>
                  <string>Pacman</string>
                  <key>CFBundleExecutable</key>
                  <string>Godot</string>
                  <key>CFBundleVersion</key>
                  <string>1.0</string>
                  <key>CFBundleShortVersionString</key>
                  <string>1.0</string>
                  <key>UIRequiresFullScreen</key>
                  <true/>
                  <key>LSRequiresIPhoneOS</key>
                  <true/>
              </dict>
              </plist>
              EOF
      - name: Export iOS XCArchive properly
        run: |
                mkdir -p build/ios
                
                # Modify export_presets.cfg to export without signing but create full structure
                sed -i '' 's/application\/export_project_only=.*/application\/export_project_only=false/' export_presets.cfg
                
                # We WANT Godot to create a complete XCArchive with binary
                godot-mono --headless --verbose --export-debug "iOS" "build/ios/GodotPacman.xcarchive"
                
                # Check results
                ls -la build/ios/GodotPacman.xcarchive || echo "XCArchive export failed"
                
                # Create instructions for the client
                cat > build/ios/SIGNING_INSTRUCTIONS.txt << 'EOF'
                iOS App Store Submission Instructions:
                
                1. You will need:
                  - Apple Developer Account ($99/year)
                  - Mac with Xcode
                  - Your app-specific Bundle ID registered in App Store Connect
                
                2. Prepare for signing:
                  - Open the XCArchive in Xcode Organizer
                  - Use the "Distribute App" option
                  - Select "App Store Connect" distribution
                  - Follow Xcode prompts to sign the app with your credentials
                  - Replace the bundle ID "com.godot.iostemplate" with your registered App ID
                
                3. Complete App Store Connect setup:
                  - Create a new app in App Store Connect
                  - Upload screenshots, descriptions, and metadata
                  - Submit the signed IPA that Xcode generates
                EOF
      - name: Generate IPA from XCArchive
        run: |
          if [ -d "build/ios/GodotPacman.xcarchive" ]; then
            echo "Generating unsigned IPA from XCArchive..."
            cd build/ios
            
            # For Godot 4.x, the app location might be different
            APP_PATH=""
            if [ -d "GodotPacman.xcarchive/Products/Applications" ]; then
              APP_PATH="GodotPacman.xcarchive/Products/Applications"
            elif [ -d "GodotPacman.xcarchive/Products/Apps" ]; then
              APP_PATH="GodotPacman.xcarchive/Products/Apps"
            fi
            
            if [ -n "$APP_PATH" ]; then
              # Find the app file (should be only one)
              APP_FILE=$(ls "$APP_PATH"/*.app 2>/dev/null | head -1)
              
              if [ -n "$APP_FILE" ]; then
                echo "Found app at: $APP_FILE"
                mkdir -p Payload
                cp -r "$APP_FILE" Payload/
                zip -r GodotPacman.ipa Payload
                rm -rf Payload
                echo "Created unsigned IPA successfully."
              else
                echo "Could not find .app file in XCArchive."
              fi
            else
              echo "Could not find Applications directory in XCArchive."
            fi
            
            cd ../..
          else
            echo "No XCArchive found, cannot create IPA."
          fi
          
      - name: Create project copy for manual export
        run: |
          # Create a clean copy of the project for manual export later
          mkdir -p build/ios/project_files
          cp -r *.tscn *.gd *.import project.godot export_presets.cfg assets/ build/ios/project_files/ 2>/dev/null || true
          echo "Project files copied for manual export if needed."
          
      - name: Package all exports
        run: |
          cd build/ios
          zip -r GodotPacman_iOS_Export.zip * -x "*.DS_Store" -x "*.git*"
          cd ../..
          
      - name: List exported files
        run: |
          echo "Export directory contents:"
          ls -la build/ios || echo "No files found in build/ios"
          
          if [ ! -f "build/ios/GodotPacman.ipa" ] && [ ! -d "build/ios/GodotPacman.xcarchive" ] && [ ! -f "build/ios/GodotPacman.pck" ]; then
            echo "No export files were created. Creating a placeholder file for artifact upload."
            mkdir -p build/ios
            echo "Export failed. Please check the logs for details." > build/ios/export_failed.txt
          fi
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-build
          path: build/ios
          retention-days: 14