name: Export iOS

on:
  workflow_dispatch:  # Manual trigger
  push:
    branches: [ main ]  # Optional: Trigger on pushes to main

jobs:
  export:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Install Godot
        run: |
          brew install --cask godot
          godot --version
          GODOT_FULL_VERSION=$(godot --version | cut -d' ' -f2)
          # Extract just the major.minor version
          GODOT_VERSION=$(echo $GODOT_FULL_VERSION | sed -E 's/([0-9]+\.[0-9]+).*/\1/')
          echo "Detected Godot version: $GODOT_FULL_VERSION (using $GODOT_VERSION for templates)"
          echo "godot_version=$GODOT_VERSION" >> $GITHUB_ENV
          echo "godot_full_version=$GODOT_FULL_VERSION" >> $GITHUB_ENV

      - name: Build Mono Solutions
        run: |
          echo "Building Mono solutions..."
          godot --build-solutions
        
      - name: Download and install templates
        run: |
          # Define all possible template directories
          TEMPLATE_DIRS=(
            "~/.local/share/godot/export_templates/${godot_version}.stable"
            "~/Library/Application Support/Godot/export_templates/${godot_version}.stable"
            "~/Library/Application Support/Godot/export_templates/${godot_full_version}"
          )
          
          # Create all template directories
          for DIR in "${TEMPLATE_DIRS[@]}"; do
            DIR=$(eval echo "$DIR")
            echo "Creating template directory: $DIR"
            mkdir -p "$DIR"
          done
          
          # Try multiple template sources and formats
          TEMPLATE_URLS=(
            "https://github.com/godotengine/godot/releases/download/${godot_version}-stable/Godot_v${godot_version}-stable_export_templates.tpz"
            "https://github.com/godotengine/godot/releases/download/${godot_version}.0-stable/Godot_v${godot_version}.0-stable_export_templates.tpz"
            "https://downloads.tuxfamily.org/godotengine/${godot_version}/Godot_v${godot_version}-stable_export_templates.tpz"
            "https://github.com/godotengine/godot-builds/releases/download/4.2.2-stable/Godot_v4.2.2-stable_export_templates.tpz"
          )
          
          # Try downloading templates
          for URL in "${TEMPLATE_URLS[@]}"; do
            echo "Trying to download templates from: $URL"
            if curl -L --connect-timeout 30 --retry 3 --retry-delay 5 "$URL" -o templates.tpz; then
              # Check if it's a valid zip file
              if unzip -t templates.tpz > /dev/null 2>&1; then
                echo "Successfully downloaded templates from $URL"
                break
              else
                echo "Downloaded file is not a valid zip archive, trying next source..."
                rm templates.tpz
              fi
            else
              echo "Failed to download from $URL, trying next source..."
            fi
          done
          
          # Final check and installation
          if [ -f templates.tpz ] && unzip -t templates.tpz > /dev/null 2>&1; then
            echo "Installing templates..."
            unzip -o templates.tpz -d .
            
            # Copy templates to all possible locations
            for DIR in "${TEMPLATE_DIRS[@]}"; do
              DIR=$(eval echo "$DIR")
              echo "Installing templates to: $DIR"
              
              # Copy from templates directory if it exists
              if [ -d "templates" ]; then
                cp -r templates/* "$DIR/"
                
                # Directly extract ios.zip from templates if needed
                if [ -f "templates/ios.zip" ]; then
                  echo "Found ios.zip in templates directory"
                  cp templates/ios.zip "$DIR/"
                fi
              fi
              
              # Also copy loose files in case templates directory doesn't exist
              cp -f *.zip "$DIR/" 2>/dev/null || true
              cp -f *.tpz "$DIR/" 2>/dev/null || true
            done
            
            # Create symlinks between different template directories for good measure
            for DIR in "${TEMPLATE_DIRS[@]}"; do
              DIR=$(eval echo "$DIR")
              if [ -d "$DIR" ]; then
                echo "Contents of $DIR:"
                ls -la "$DIR/"
              fi
            done
            
            # Try to manually extract iOS templates if they're inside another zip
            if [ -f "templates/ios.zip" ]; then
              for DIR in "${TEMPLATE_DIRS[@]}"; do
                DIR=$(eval echo "$DIR")
                cp templates/ios.zip "$DIR/" || true
              done
            elif [ -f "templates.tpz" ]; then
              echo "Extracting iOS template from templates.tpz"
              mkdir -p temp_extract
              unzip -j templates.tpz "*ios*" -d temp_extract || true
              if [ -f "temp_extract/ios.zip" ]; then
                for DIR in "${TEMPLATE_DIRS[@]}"; do
                  DIR=$(eval echo "$DIR")
                  cp temp_extract/ios.zip "$DIR/" || true
                done
              fi
              rm -rf temp_extract
            fi
            
            # Debug - List all template directories
            echo "Template directories contents:"
            for DIR in "${TEMPLATE_DIRS[@]}"; do
              DIR=$(eval echo "$DIR")
              echo "Contents of $DIR:"
              ls -la "$DIR/" || true
            done
          else
            echo "Failed to obtain valid export templates after multiple attempts."
            exit 1
          fi
      
      - name: Create export_presets.cfg if missing
        run: |
          if [ ! -f export_presets.cfg ]; then
            echo "Creating minimal export_presets.cfg for iOS"
            cat > export_presets.cfg << 'EOFMARKER'
          [preset.0]
          
          name="iOS"
          platform="iOS"
          runnable=true
          dedicated_server=false
          custom_features=""
          export_filter="all_resources"
          include_filter=""
          exclude_filter=""
          export_path="build/ios/GodotPacman.xcarchive"
          encryption_include_filters=""
          encryption_exclude_filters=""
          encrypt_pck=false
          encrypt_directory=false
          
          [preset.0.options]
          
          custom_template/debug=""
          custom_template/release=""
          application/app_store_team_id="12345678AB"  # Dummy ID to pass validation
          application/provisioning_profile_uuid_debug=""
          application/code_sign_identity_debug=""
          application/export_method_debug=1  # Set to development
          application/provisioning_profile_uuid_release=""
          application/code_sign_identity_release=""
          application/export_method_release=0
          application/targeted_device_family=2
          application/bundle_identifier="com.yourusername.godotpacman"
          application/signature=""
          application/short_version="1.0"
          application/version="1.0"
          application/icon_76x76=""
          application/icon_152x152=""
          application/icon_1024x1024=""
          capabilities/access_wifi=false
          capabilities/push_notifications=false
          user_data/accessible_from_files_app=false
          user_data/accessible_from_itunes_sharing=false
          privacy/camera_usage_description=""
          privacy/microphone_usage_description=""
          privacy/photolibrary_usage_description=""
          orientation/portrait=true
          orientation/landscape_left=false
          orientation/landscape_right=false
          orientation/portrait_upside_down=false
          EOFMARKER
            echo "Created export_presets.cfg file"
          else
            echo "export_presets.cfg already exists"
          fi
          cat export_presets.cfg
          
      - name: Godot export debug info
        run: |
          echo "Installed Godot version:"
          godot --version
          
          echo "Looking for template locations:"
          find ~ -name "export_templates" -type d | xargs ls -la || true
          
          echo "Checking specific template paths:"
          ls -la ~/.local/share/godot/export_templates/ 2>/dev/null || echo "Path not found"
          ls -la ~/Library/Application\ Support/Godot/export_templates/ 2>/dev/null || echo "Path not found"
          
          echo "Current directory content:"
          ls -la
          
      - name: Export iOS XCArchive
        run: |
          mkdir -p build/ios
          echo "Exporting XCArchive using --export-debug..."
          godot --headless --export-debug "iOS" "build/ios/GodotPacman.xcarchive" || true
          if [ -d "build/ios/GodotPacman.xcarchive" ]; then
            echo "Successfully created XCArchive!"
            # Create a README with signing instructions (if needed)
            cat > build/ios/SIGNING_INSTRUCTIONS.txt << EOF
          iOS Export - Signing Instructions

          This archive contains both an XCArchive and an unsigned IPA.

          To sign with your Apple Developer account:

          1. Open Xcode on a Mac.
          2. Open Window > Organizer.
          3. Drag the GodotPacman.xcarchive into the Organizer.
          4. Click "Distribute App".
          5. Select "App Store Connect" or "Ad Hoc" distribution.
          6. Follow the signing steps with your Apple Developer credentials.
          EOF
                    else
                      echo "XCArchive export failed."
                    fi
          
      - name: Generate IPA from XCArchive
        run: |
          if [ -d "build/ios/GodotPacman.xcarchive" ]; then
            echo "Generating unsigned IPA from XCArchive..."
            cd build/ios
            
            # For Godot 4.x, the app location might be different
            APP_PATH=""
            if [ -d "GodotPacman.xcarchive/Products/Applications" ]; then
              APP_PATH="GodotPacman.xcarchive/Products/Applications"
            elif [ -d "GodotPacman.xcarchive/Products/Apps" ]; then
              APP_PATH="GodotPacman.xcarchive/Products/Apps"
            fi
            
            if [ -n "$APP_PATH" ]; then
              # Find the app file (should be only one)
              APP_FILE=$(ls "$APP_PATH"/*.app 2>/dev/null | head -1)
              
              if [ -n "$APP_FILE" ]; then
                echo "Found app at: $APP_FILE"
                mkdir -p Payload
                cp -r "$APP_FILE" Payload/
                zip -r GodotPacman.ipa Payload
                rm -rf Payload
                echo "Created unsigned IPA successfully."
              else
                echo "Could not find .app file in XCArchive."
              fi
            else
              echo "Could not find Applications directory in XCArchive."
            fi
            
            cd ../..
          else
            echo "No XCArchive found, cannot create IPA."
          fi
          
      - name: Create project copy for manual export
        run: |
          # Create a clean copy of the project for manual export later
          mkdir -p build/ios/project_files
          cp -r *.tscn *.gd *.import project.godot export_presets.cfg assets/ build/ios/project_files/ 2>/dev/null || true
          echo "Project files copied for manual export if needed."
          
      - name: Package all exports
        run: |
          cd build/ios
          zip -r GodotPacman_iOS_Export.zip * -x "*.DS_Store" -x "*.git*"
          cd ../..
          
      - name: List exported files
        run: |
          echo "Export directory contents:"
          ls -la build/ios || echo "No files found in build/ios"
          
          if [ ! -f "build/ios/GodotPacman.ipa" ] && [ ! -d "build/ios/GodotPacman.xcarchive" ]; then
            echo "No export files were created. Creating a placeholder file for artifact upload."
            mkdir -p build/ios
            echo "Export failed. Please check the logs for details." > build/ios/export_failed.txt
          fi
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-build
          path: build/ios
          retention-days: 14